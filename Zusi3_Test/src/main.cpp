#include <Arduino.h>
#include <WiFi.h>
#include <SPI.h>
#include <HardwareSerial.h>

byte ZusiIP[4] = {192, 168, 0, 44};
float vv;
int hll = 0;
int n = 0;
int nn = 0;
int f = 1;
int x = 0;
int vIst;
int Data1[5];
int Eingangswerte[16];
int StartSerie[16] = { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 10, 0, 6, 0, 0, 0 };
int StartSerie2[16] = { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0 };
byte mac[] = { 0x90, 0xA2, 0xDA, 0x10, 0x1D, 0x8E };

const char *ssid = "devolo-bcf2afac0c61";
const char *passwort = "ZVAVCVUQBDSPDCYV";

IPAddress ESPIP(192, 168, 2, 51); // IP-Adresse ESP
IPAddress subnet(255, 255, 255, 0); // Subnet-Maske
IPAddress gateway(192, 168, 2, 1);  // Standard Gateway

IPAddress server(ZusiIP[0], ZusiIP[1], ZusiIP[2], ZusiIP[3]); //ip Adresse Zusi3

uint8_t Anmeldung[] = { 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0xA, 0x0,
                        0x0, 0x0, 0x3, 0x0, 0x46, 0x61, 0x68, 0x72, 0x70, 0x75, 0x6C, 0x74, 0x5, 0x0, 0x0, 0x0, 0x4, 0x0, 0x32, 0x2E, 0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                      };

uint8_t Abfrage[] = { 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA, 0x0,   // Abfrage = "Serie"
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, // v Ist
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, // P HLL
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x3, 0x0, // P BrZyl
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, // P HBL
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x9, 0x0, // F Gesamt
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0xD, 0x0, // I Fahrleitung LOK
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0xE, 0x0, // U Fahrleitung LOK
                      //0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x13, 0x0, // HS LOK
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x19, 0x0, // s Zurückgelegt
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x23, 0x0, // t
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4C, 0x0, // r Bogen
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4F, 0x0, // a X
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x50, 0x0, // a y
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x52, 0x0, // Drehbeschleunigung X
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x53, 0x0, // Drehbeschleunigung Y
                      0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x64, 0x0, // Status SIFA
                      //0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x66, 0x0, // Status Türen
                      0xFF, 0xFF, 0xFF, 0xFF,
                      0xFF, 0xFF, 0xFF, 0xFF,
                      0xFF, 0xFF, 0xFF, 0xFF
                    };

WiFiClient client;

void setup() {
  WiFi.begin(mac, ESPIP);
  Serial.begin(9600);                        // Serial 1 für Debugging
  Serial1.begin(19200);
  Serial2.begin(19200);
  Serial3.begin(19200);                       // Serial 3 für LM und Analoganzeigen
  while (!Serial) {
    ;                                // Wartet, bis die serielle Schnittstelle Kontakt aufgebaut hat
  }

  delay(1000);                            // Zeit zum initialisieren
  Serial.println("Verbinden...");

  if (client.connect(server, 1436)) {                // Wenn Verbindung erfolgreich auf Monitor ausgeben
    Serial.println("Verbunden");
    Serial.println(ESPIP);                       // ip Client (Shield)
    Serial.println(server);                     // ip Server (Zusi3)
  }
  else {
    Serial.println("Verbinden fehlgeschlagen");               // Wenn Verbindung nicht erfolgreich auf Monitor ausgeben
  }
  client.write (Anmeldung, 59);
  client.write (Abfrage, 166);                 // *** Achtung !!! *** Muss der tatsächlichen Anzahl von Bytes in der Serie entsprechen
}